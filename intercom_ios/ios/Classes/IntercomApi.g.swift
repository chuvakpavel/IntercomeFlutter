// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum Visibility: Int {
  case visible = 0
  case gone = 1
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IosIntercomApi {
  func initialize(appId: String, apiKey: String) throws
  func setUserHash(userHash: String) throws
  func loginIdentifiedUserWithEmail(email: String, completion: @escaping (Result<Void, Error>) -> Void)
  func loginIdentifiedWithUserIdAndEmail(userId: String, email: String, completion: @escaping (Result<Void, Error>) -> Void)
  func loginIdentifiedWithUserId(userId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func loginUnidentifiedUser(completion: @escaping (Result<Void, Error>) -> Void)
  func logout() throws
  func setLauncherVisibility(visibility: Visibility) throws
  func unreadConversationCount(completion: @escaping (Result<Int64, Error>) -> Void)
  func setInAppMessagesVisibility(visibility: Visibility) throws
  func displayMessenger() throws
  func hideMessenger() throws
  func displayHelpCenter() throws
  func displayHelpCenterCollections(collectionIds: [String]) throws
  func displayMessages() throws
  func logEvent(name: String) throws
  func logEventWithMetaData(name: String, metaData: [String: Any?]) throws
  func sendTokenToIntercom(token: String) throws
  func handlePushMessage() throws
  func displayMessageComposer(message: String) throws
  func isIntercomPush(message: [String: String], completion: @escaping (Result<Bool, Error>) -> Void)
  func handlePush(message: [String: String]) throws
  func setBottomPadding(padding: Int64) throws
  func displayArticle(articleId: String) throws
  func displayCarousel(carouselId: String) throws
  func displaySurvey(surveyId: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IosIntercomApiSetup {
  /// The codec used by IosIntercomApi.
  /// Sets up an instance of `IosIntercomApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IosIntercomApi?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.initialize", binaryMessenger: binaryMessenger)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let apiKeyArg = args[1] as! String
        do {
          try api.initialize(appId: appIdArg, apiKey: apiKeyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let setUserHashChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.setUserHash", binaryMessenger: binaryMessenger)
    if let api = api {
      setUserHashChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userHashArg = args[0] as! String
        do {
          try api.setUserHash(userHash: userHashArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUserHashChannel.setMessageHandler(nil)
    }
    let loginIdentifiedUserWithEmailChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.loginIdentifiedUserWithEmail", binaryMessenger: binaryMessenger)
    if let api = api {
      loginIdentifiedUserWithEmailChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let emailArg = args[0] as! String
        api.loginIdentifiedUserWithEmail(email: emailArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginIdentifiedUserWithEmailChannel.setMessageHandler(nil)
    }
    let loginIdentifiedWithUserIdAndEmailChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.loginIdentifiedWithUserIdAndEmail", binaryMessenger: binaryMessenger)
    if let api = api {
      loginIdentifiedWithUserIdAndEmailChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        let emailArg = args[1] as! String
        api.loginIdentifiedWithUserIdAndEmail(userId: userIdArg, email: emailArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginIdentifiedWithUserIdAndEmailChannel.setMessageHandler(nil)
    }
    let loginIdentifiedWithUserIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.loginIdentifiedWithUserId", binaryMessenger: binaryMessenger)
    if let api = api {
      loginIdentifiedWithUserIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg = args[0] as! String
        api.loginIdentifiedWithUserId(userId: userIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginIdentifiedWithUserIdChannel.setMessageHandler(nil)
    }
    let loginUnidentifiedUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.loginUnidentifiedUser", binaryMessenger: binaryMessenger)
    if let api = api {
      loginUnidentifiedUserChannel.setMessageHandler { _, reply in
        api.loginUnidentifiedUser() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginUnidentifiedUserChannel.setMessageHandler(nil)
    }
    let logoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.logout", binaryMessenger: binaryMessenger)
    if let api = api {
      logoutChannel.setMessageHandler { _, reply in
        do {
          try api.logout()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logoutChannel.setMessageHandler(nil)
    }
    let setLauncherVisibilityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.setLauncherVisibility", binaryMessenger: binaryMessenger)
    if let api = api {
      setLauncherVisibilityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let visibilityArg = Visibility(rawValue: args[0] as! Int)!
        do {
          try api.setLauncherVisibility(visibility: visibilityArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLauncherVisibilityChannel.setMessageHandler(nil)
    }
    let unreadConversationCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.unreadConversationCount", binaryMessenger: binaryMessenger)
    if let api = api {
      unreadConversationCountChannel.setMessageHandler { _, reply in
        api.unreadConversationCount() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      unreadConversationCountChannel.setMessageHandler(nil)
    }
    let setInAppMessagesVisibilityChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.setInAppMessagesVisibility", binaryMessenger: binaryMessenger)
    if let api = api {
      setInAppMessagesVisibilityChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let visibilityArg = Visibility(rawValue: args[0] as! Int)!
        do {
          try api.setInAppMessagesVisibility(visibility: visibilityArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setInAppMessagesVisibilityChannel.setMessageHandler(nil)
    }
    let displayMessengerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displayMessenger", binaryMessenger: binaryMessenger)
    if let api = api {
      displayMessengerChannel.setMessageHandler { _, reply in
        do {
          try api.displayMessenger()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displayMessengerChannel.setMessageHandler(nil)
    }
    let hideMessengerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.hideMessenger", binaryMessenger: binaryMessenger)
    if let api = api {
      hideMessengerChannel.setMessageHandler { _, reply in
        do {
          try api.hideMessenger()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      hideMessengerChannel.setMessageHandler(nil)
    }
    let displayHelpCenterChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displayHelpCenter", binaryMessenger: binaryMessenger)
    if let api = api {
      displayHelpCenterChannel.setMessageHandler { _, reply in
        do {
          try api.displayHelpCenter()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displayHelpCenterChannel.setMessageHandler(nil)
    }
    let displayHelpCenterCollectionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displayHelpCenterCollections", binaryMessenger: binaryMessenger)
    if let api = api {
      displayHelpCenterCollectionsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let collectionIdsArg = args[0] as! [String]
        do {
          try api.displayHelpCenterCollections(collectionIds: collectionIdsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displayHelpCenterCollectionsChannel.setMessageHandler(nil)
    }
    let displayMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displayMessages", binaryMessenger: binaryMessenger)
    if let api = api {
      displayMessagesChannel.setMessageHandler { _, reply in
        do {
          try api.displayMessages()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displayMessagesChannel.setMessageHandler(nil)
    }
    let logEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.logEvent", binaryMessenger: binaryMessenger)
    if let api = api {
      logEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        do {
          try api.logEvent(name: nameArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEventChannel.setMessageHandler(nil)
    }
    let logEventWithMetaDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.logEventWithMetaData", binaryMessenger: binaryMessenger)
    if let api = api {
      logEventWithMetaDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        let metaDataArg = args[1] as! [String: Any?]
        do {
          try api.logEventWithMetaData(name: nameArg, metaData: metaDataArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logEventWithMetaDataChannel.setMessageHandler(nil)
    }
    let sendTokenToIntercomChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.sendTokenToIntercom", binaryMessenger: binaryMessenger)
    if let api = api {
      sendTokenToIntercomChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tokenArg = args[0] as! String
        do {
          try api.sendTokenToIntercom(token: tokenArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendTokenToIntercomChannel.setMessageHandler(nil)
    }
    let handlePushMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.handlePushMessage", binaryMessenger: binaryMessenger)
    if let api = api {
      handlePushMessageChannel.setMessageHandler { _, reply in
        do {
          try api.handlePushMessage()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      handlePushMessageChannel.setMessageHandler(nil)
    }
    let displayMessageComposerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displayMessageComposer", binaryMessenger: binaryMessenger)
    if let api = api {
      displayMessageComposerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! String
        do {
          try api.displayMessageComposer(message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displayMessageComposerChannel.setMessageHandler(nil)
    }
    let isIntercomPushChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.isIntercomPush", binaryMessenger: binaryMessenger)
    if let api = api {
      isIntercomPushChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! [String: String]
        api.isIntercomPush(message: messageArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      isIntercomPushChannel.setMessageHandler(nil)
    }
    let handlePushChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.handlePush", binaryMessenger: binaryMessenger)
    if let api = api {
      handlePushChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! [String: String]
        do {
          try api.handlePush(message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      handlePushChannel.setMessageHandler(nil)
    }
    let setBottomPaddingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.setBottomPadding", binaryMessenger: binaryMessenger)
    if let api = api {
      setBottomPaddingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paddingArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.setBottomPadding(padding: paddingArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setBottomPaddingChannel.setMessageHandler(nil)
    }
    let displayArticleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displayArticle", binaryMessenger: binaryMessenger)
    if let api = api {
      displayArticleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let articleIdArg = args[0] as! String
        do {
          try api.displayArticle(articleId: articleIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displayArticleChannel.setMessageHandler(nil)
    }
    let displayCarouselChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displayCarousel", binaryMessenger: binaryMessenger)
    if let api = api {
      displayCarouselChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let carouselIdArg = args[0] as! String
        do {
          try api.displayCarousel(carouselId: carouselIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displayCarouselChannel.setMessageHandler(nil)
    }
    let displaySurveyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.IosIntercomApi.displaySurvey", binaryMessenger: binaryMessenger)
    if let api = api {
      displaySurveyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let surveyIdArg = args[0] as! String
        do {
          try api.displaySurvey(surveyId: surveyIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      displaySurveyChannel.setMessageHandler(nil)
    }
  }
}
